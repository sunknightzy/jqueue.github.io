<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>J.Queue的技术博客</title>
  
  <subtitle>拥抱开源，拥抱技术分享</subtitle>
  <link href="http://sunknightzy.github.io/atom.xml" rel="self"/>
  
  <link href="http://sunknightzy.github.io/"/>
  <updated>2022-09-12T01:39:15.766Z</updated>
  <id>http://sunknightzy.github.io/</id>
  
  <author>
    <name>J.Queue</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>你知道 @Async 是怎么让方法异步执行的吗？</title>
    <link href="http://sunknightzy.github.io/22022/09/12/springboot/spring-boot-async-anno/"/>
    <id>http://sunknightzy.github.io/22022/09/12/springboot/spring-boot-async-anno/</id>
    <published>+022022-09-12T01:05:44.000Z</published>
    <updated>2022-09-12T01:39:15.766Z</updated>
    
    
    <summary type="html">&lt;p&gt;在阅读本文之前，你可以通过 &lt;a href=&quot;https://spring.io/guides/gs/async-method/&quot;&gt;Creating Asynchronous Methods&lt;/a&gt; 指导来体验下创建异步方法的使用方式。&lt;/p&gt;
&lt;p&gt;为什么要写这篇文章，本质上对于这些 Spring 已经封装好的能力，并不需要去关注它底层到底是怎么玩的，比如 &lt;code&gt;@Async&lt;/code&gt;，你肯定可以猜到对于打了这个注解的方法（或者类），在执行这个方法（或者类下所有方法）时，Spring 框架会将当前方法丢进到一个单独的线程池中去执行，以达到方法异步执行的目的。&lt;/p&gt;</summary>
    
    
    
    <category term="SpringBoot" scheme="http://sunknightzy.github.io/categories/SpringBoot/"/>
    
    
    <category term="SpringBoot" scheme="http://sunknightzy.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>RocketMQ Push 消费模型</title>
    <link href="http://sunknightzy.github.io/2022/09/22/mq/rocketmq/rocketmq-push-consumer-model/"/>
    <id>http://sunknightzy.github.io/2022/09/22/mq/rocketmq/rocketmq-push-consumer-model/</id>
    <published>2022-09-22T13:31:29.000Z</published>
    <updated>2022-09-22T13:32:31.298Z</updated>
    
    
    <summary type="html">&lt;p&gt;Push 模式是指由 Server 端来控制消息的推送，即当有消息到 Server 之后，会将消息主动投递给 client(Consumer 端)。&lt;/p&gt;
&lt;h2 id=&quot;使用-DefaultMQPushConsumer-消费消息&quot;&gt;&lt;a href=&quot;#使用-DefaultMQPushConsumer-消费消息&quot; class=&quot;headerlink&quot; title=&quot;使用 DefaultMQPushConsumer 消费消息&quot;&gt;&lt;/a&gt;使用 DefaultMQPushConsumer 消费消息&lt;/h2&gt;&lt;p&gt;下面是使用 DefaultMQPushConsumer 消费消息的官方示例代码：&lt;/p&gt;</summary>
    
    
    
    <category term="RocketMQ" scheme="http://sunknightzy.github.io/categories/RocketMQ/"/>
    
    
    <category term="RocketMQ" scheme="http://sunknightzy.github.io/tags/RocketMQ/"/>
    
  </entry>
  
  <entry>
    <title>RocketMQ 本地部署问题总结</title>
    <link href="http://sunknightzy.github.io/2022/09/22/mq/rocketmq/rocketmq-deploy-issue/"/>
    <id>http://sunknightzy.github.io/2022/09/22/mq/rocketmq/rocketmq-deploy-issue/</id>
    <published>2022-09-22T13:29:02.000Z</published>
    <updated>2022-09-22T13:32:35.514Z</updated>
    
    
    <summary type="html">&lt;p&gt;本篇分为 RocketMQ 部署和 RocketMQ-dashboard 部署两部分，主要是 RocketMQ 部署问题较多，汇总了下网上各路大神以及官方 issue 的讨论汇总而来。&lt;/p&gt;
&lt;h2 id=&quot;RocketMQ-部署&quot;&gt;&lt;a href=&quot;#RocketMQ-部署&quot; class=&quot;headerlink&quot; title=&quot;RocketMQ 部署&quot;&gt;&lt;/a&gt;RocketMQ 部署&lt;/h2&gt;&lt;p&gt;根据官方的&lt;a href=&quot;https://rocketmq.apache.org/docs/%E4%BB%8B%E7%BB%8D/02quickstart&quot;&gt;快速开始&lt;/a&gt; 尝试在本地部署 RocketMQ；如果你是按照官方文档直接来搞，可能 90% 是不可能成功的。&lt;/p&gt;</summary>
    
    
    
    <category term="RocketMQ" scheme="http://sunknightzy.github.io/categories/RocketMQ/"/>
    
    
    <category term="RocketMQ" scheme="http://sunknightzy.github.io/tags/RocketMQ/"/>
    
  </entry>
  
  <entry>
    <title>ab 测试</title>
    <link href="http://sunknightzy.github.io/2022/09/22/tests/test-benchmark-ab/"/>
    <id>http://sunknightzy.github.io/2022/09/22/tests/test-benchmark-ab/</id>
    <published>2022-09-22T13:26:42.000Z</published>
    <updated>2022-09-22T13:28:39.666Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;Apache-Benchmark-Tool&quot;&gt;&lt;a href=&quot;#Apache-Benchmark-Tool&quot; class=&quot;headerlink&quot; title=&quot;Apache Benchmark Tool&quot;&gt;&lt;/a&gt;Apache Benchmark Tool&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;ab is a tool for benchmarking your Apache Hypertext Transfer Protocol (HTTP) server. It is designed to give you an impression of how your current Apache installation performs. This especially shows you how many requests per second your Apache installation is capable of serving.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ab 是 apache http server 基准测试工具，它可以帮助我们去了解当前服务的表现，如每秒请求数等。下面是 ab 对应的所有 options 摘要信息：&lt;/p&gt;</summary>
    
    
    
    <category term="test" scheme="http://sunknightzy.github.io/categories/test/"/>
    
    
    <category term="test" scheme="http://sunknightzy.github.io/tags/test/"/>
    
    <category term="ab test" scheme="http://sunknightzy.github.io/tags/ab-test/"/>
    
  </entry>
  
  <entry>
    <title>浅析 SOFA 注册中心数据同步</title>
    <link href="http://sunknightzy.github.io/2022/09/12/sofa/sofa-registry-sync-data/"/>
    <id>http://sunknightzy.github.io/2022/09/12/sofa/sofa-registry-sync-data/</id>
    <published>2022-09-12T02:58:30.000Z</published>
    <updated>2022-09-12T03:00:03.890Z</updated>
    
    
    <summary type="html">&lt;p&gt;本篇主要对 SOFARegistry 的数据同步模块进行解析，对于注册中心的概念以及 SOFARegistry 的基础架构不做过多阐述，相关介绍可以见&lt;a href=&quot;%5Bhttps://www.sofastack.tech/blog/sofa-registry-introduction/%5D(https://www.sofastack.tech/blog/sofa-registry-introduction/)&quot;&gt;海量数据下的注册中心 - SOFARegistry 架构介绍&lt;/a&gt; 这篇文章。&lt;/p&gt;</summary>
    
    
    
    <category term="SOFA" scheme="http://sunknightzy.github.io/categories/SOFA/"/>
    
    
    <category term="分布式" scheme="http://sunknightzy.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    <category term="注册中心" scheme="http://sunknightzy.github.io/tags/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>聊 一聊 maven 测试相关的插件</title>
    <link href="http://sunknightzy.github.io/2022/07/31/maven/maven-plugin-about-test/"/>
    <id>http://sunknightzy.github.io/2022/07/31/maven/maven-plugin-about-test/</id>
    <published>2022-07-31T03:09:51.000Z</published>
    <updated>2022-09-12T03:12:02.249Z</updated>
    
    
    <summary type="html">&lt;p&gt;在之前的 &lt;a href=&quot;https://juejin.cn/post/6919490393893502984&quot;&gt;聊一聊 maven 生命周期和 maven 插件编写&lt;/a&gt; 这篇文章中，简单聊了点maven 构建生命周期和如何编写一个 maven 插件。本篇文章从插件入手，来探讨下 maven 中那些于测试相关的插件，这些插件与工程师日常开发是密切相关的，可能很多情况下你不需要关注，因为已经有前辈帮你搞完了；“事不关己高高挂起” 与 “知其然知其所以然” 是两种不同的态度，对待技术，我建议是后者！&lt;/p&gt;</summary>
    
    
    
    <category term="maven" scheme="http://sunknightzy.github.io/categories/maven/"/>
    
    
    <category term="maven" scheme="http://sunknightzy.github.io/tags/maven/"/>
    
    <category term="maven plugin" scheme="http://sunknightzy.github.io/tags/maven-plugin/"/>
    
    <category term="testing" scheme="http://sunknightzy.github.io/tags/testing/"/>
    
  </entry>
  
  <entry>
    <title>修改 YApi 的用户角色(添加管理员)</title>
    <link href="http://sunknightzy.github.io/2022/05/25/api/api-yapi-change-user-role-by-mongo/"/>
    <id>http://sunknightzy.github.io/2022/05/25/api/api-yapi-change-user-role-by-mongo/</id>
    <published>2022-05-25T14:07:06.000Z</published>
    <updated>2022-05-25T14:16:17.361Z</updated>
    
    
    <summary type="html">&lt;p&gt;YApi 后端使用的是 MongoDB，先进入命令行管理工具：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;mongo&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后进入 yapi 数据库：&lt;/p&gt;</summary>
    
    
    
    <category term="api" scheme="http://sunknightzy.github.io/categories/api/"/>
    
    
    <category term="api" scheme="http://sunknightzy.github.io/tags/api/"/>
    
    <category term="yapi" scheme="http://sunknightzy.github.io/tags/yapi/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Config Nacos 配置热更新分析</title>
    <link href="http://sunknightzy.github.io/2022/04/17/config/spring-cloud-config-nacos/"/>
    <id>http://sunknightzy.github.io/2022/04/17/config/spring-cloud-config-nacos/</id>
    <published>2022-04-17T14:05:36.000Z</published>
    <updated>2022-04-24T09:32:05.810Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://vspicgo.oss-cn-shanghai.aliyuncs.com/des_structure.jpeg&quot;</summary>
        
      
    
    
    
    <category term="Nacos" scheme="http://sunknightzy.github.io/categories/Nacos/"/>
    
    
    <category term="spring" scheme="http://sunknightzy.github.io/tags/spring/"/>
    
    <category term="spring cloud" scheme="http://sunknightzy.github.io/tags/spring-cloud/"/>
    
    <category term="nacos" scheme="http://sunknightzy.github.io/tags/nacos/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Alibaba Nacos Config 是如何读取配置的？</title>
    <link href="http://sunknightzy.github.io/2022/03/13/springcloud/spring-cloud-config-nacos-config-locator/"/>
    <id>http://sunknightzy.github.io/2022/03/13/springcloud/spring-cloud-config-nacos-config-locator/</id>
    <published>2022-03-13T03:45:39.000Z</published>
    <updated>2022-04-24T03:46:42.973Z</updated>
    
    
    <summary type="html">&lt;p&gt;nacos 配置最高级别的隔离是 namespace，其后是 group；如果有配置隔离的诉求，建议优先使用 namespace 进行隔离。因为对于 sharedConfigs 和 extensionConfigs 来说，他们使用的是默认的 DEFALUT_GROUP，所以如果你配置了 sharedConfigs 和 extensionConfigs ，期望通过指定 group 进行隔离是做不到的。&lt;/p&gt;</summary>
    
    
    
    <category term="SpringCloud" scheme="http://sunknightzy.github.io/categories/SpringCloud/"/>
    
    
    <category term="nacos" scheme="http://sunknightzy.github.io/tags/nacos/"/>
    
    <category term="config" scheme="http://sunknightzy.github.io/tags/config/"/>
    
  </entry>
  
  <entry>
    <title>1 分钟快速上手 Spring Cache</title>
    <link href="http://sunknightzy.github.io/2022/02/21/spring/spring-cache-quick-start/"/>
    <id>http://sunknightzy.github.io/2022/02/21/spring/spring-cache-quick-start/</id>
    <published>2022-02-21T03:43:24.000Z</published>
    <updated>2022-04-24T03:44:46.723Z</updated>
    
    
    <summary type="html">&lt;p&gt;如果你现在有一个现成的工程，你想给你工程的某个接口增加缓存，再不可以分布式缓存的情况下，你可以通过以下两步完成 &lt;code&gt;Spring Cache&lt;/code&gt; 接入:&lt;/p&gt;</summary>
    
    
    
    <category term="spring" scheme="http://sunknightzy.github.io/categories/spring/"/>
    
    
    <category term="spring" scheme="http://sunknightzy.github.io/tags/spring/"/>
    
    <category term="cache" scheme="http://sunknightzy.github.io/tags/cache/"/>
    
  </entry>
  
  <entry>
    <title>2021 年终总结-磊叔的 Work Life Balance</title>
    <link href="http://sunknightzy.github.io/2021/12/27/share/shares-2021/"/>
    <id>http://sunknightzy.github.io/2021/12/27/share/shares-2021/</id>
    <published>2021-12-27T03:40:31.000Z</published>
    <updated>2022-04-24T03:42:42.796Z</updated>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;生活，在喜怒哀乐间走走停停。不知道会遇见什么，只知道阳光这么好，别辜负了今天&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;抓了一把花生米，开了一罐啤酒，打开新买的台式机，用上被新同事“嫌弃”声音太大的机械键盘，然后以文字的方式来唠一唠我的 2021。&lt;/p&gt;</summary>
    
    
    
    <category term="experience" scheme="http://sunknightzy.github.io/categories/experience/"/>
    
    
    <category term="SOFA" scheme="http://sunknightzy.github.io/tags/SOFA/"/>
    
    <category term="杭州" scheme="http://sunknightzy.github.io/tags/%E6%9D%AD%E5%B7%9E/"/>
    
    <category term="合肥" scheme="http://sunknightzy.github.io/tags/%E5%90%88%E8%82%A5/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot Actuator 潜在的 OOM 问题</title>
    <link href="http://sunknightzy.github.io/2021/11/29/springboot/springboot-series-actuator-oom/"/>
    <id>http://sunknightzy.github.io/2021/11/29/springboot/springboot-series-actuator-oom/</id>
    <published>2021-11-29T03:37:27.000Z</published>
    <updated>2022-04-24T03:39:18.474Z</updated>
    
    
    <summary type="html">&lt;p&gt;此问题背景产生于近期需要上线的一个功能的埋点；主要表现就是在应用启动之后的一段时间内，内存使用一直呈现递增趋势。&lt;/p&gt;</summary>
    
    
    
    <category term="SpringBoot" scheme="http://sunknightzy.github.io/categories/SpringBoot/"/>
    
    
    <category term="OOM" scheme="http://sunknightzy.github.io/tags/OOM/"/>
    
    <category term="SpringBoot" scheme="http://sunknightzy.github.io/tags/SpringBoot/"/>
    
    <category term="actuator" scheme="http://sunknightzy.github.io/tags/actuator/"/>
    
  </entry>
  
  <entry>
    <title>为什么你的 SpringBoot 自动配置失效了</title>
    <link href="http://sunknightzy.github.io/2021/11/15/springboot/springboot-series-autoconfigure-invalid/"/>
    <id>http://sunknightzy.github.io/2021/11/15/springboot/springboot-series-autoconfigure-invalid/</id>
    <published>2021-11-15T03:35:18.000Z</published>
    <updated>2022-04-24T03:36:16.938Z</updated>
    
    
    <summary type="html">&lt;p&gt;本文源自近期项目中遇到的问题， bug 总是出现在你自以为是的地方…&lt;/p&gt;</summary>
    
    
    
    <category term="SpringBoot" scheme="http://sunknightzy.github.io/categories/SpringBoot/"/>
    
    
    <category term="SpringBoot" scheme="http://sunknightzy.github.io/tags/SpringBoot/"/>
    
    <category term="自动配置" scheme="http://sunknightzy.github.io/tags/%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>git 中 merge 和 rebase 小记</title>
    <link href="http://sunknightzy.github.io/2021/11/09/git/git-cmd-rebase-merge/"/>
    <id>http://sunknightzy.github.io/2021/11/09/git/git-cmd-rebase-merge/</id>
    <published>2021-11-09T03:32:40.000Z</published>
    <updated>2022-04-24T03:33:46.751Z</updated>
    
    
    <summary type="html">&lt;p&gt;作为一线工程师的你，对于 git一定不会陌生，git 作为一个开源的分布式版本控制系统，有着广泛的用户基础。git 使用有很多可视化的工具，idea 自身也大多都集成了 git 套件，如下：&lt;/p&gt;</summary>
    
    
    
    <category term="git" scheme="http://sunknightzy.github.io/categories/git/"/>
    
    
    <category term="git" scheme="http://sunknightzy.github.io/tags/git/"/>
    
    <category term="merge" scheme="http://sunknightzy.github.io/tags/merge/"/>
    
    <category term="rebase" scheme="http://sunknightzy.github.io/tags/rebase/"/>
    
  </entry>
  
  <entry>
    <title>mysql 日志文件</title>
    <link href="http://sunknightzy.github.io/2021/11/08/middleware/middleware-mysql-log-file/"/>
    <id>http://sunknightzy.github.io/2021/11/08/middleware/middleware-mysql-log-file/</id>
    <published>2021-11-08T03:30:18.000Z</published>
    <updated>2022-04-24T03:31:27.318Z</updated>
    
    
    <summary type="html">&lt;p&gt;日志文件记录了影响 mysql 数据库的各种类型活动，mysql 中常见的日志文件主要包括以下 4 种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;错误日志&lt;/li&gt;
&lt;li&gt;二进制日志&lt;/li&gt;
&lt;li&gt;慢查询日志&lt;/li&gt;
&lt;li&gt;查询日志&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些日志文件可以帮助我们对mysql数据库的运行状态进行诊断，从而更好的进行数据库层面的优化。&lt;/p&gt;</summary>
    
    
    
    <category term="Middleware" scheme="http://sunknightzy.github.io/categories/Middleware/"/>
    
    
    <category term="mysql" scheme="http://sunknightzy.github.io/tags/mysql/"/>
    
    <category term="log" scheme="http://sunknightzy.github.io/tags/log/"/>
    
  </entry>
  
  <entry>
    <title>聊一聊 Mockito</title>
    <link href="http://sunknightzy.github.io/2021/11/06/tests/test-mock-mockito/"/>
    <id>http://sunknightzy.github.io/2021/11/06/tests/test-mock-mockito/</id>
    <published>2021-11-06T03:26:33.000Z</published>
    <updated>2022-04-24T03:29:36.816Z</updated>
    
    
    <summary type="html">&lt;p&gt;Mockito 是 mocking 框架，它让你用简洁的API做测试。而且 Mockito 简单易学，它可读性强和验证语法简洁。&lt;/p&gt;</summary>
    
    
    
    <category term="test" scheme="http://sunknightzy.github.io/categories/test/"/>
    
    
    <category term="test" scheme="http://sunknightzy.github.io/tags/test/"/>
    
    <category term="mock" scheme="http://sunknightzy.github.io/tags/mock/"/>
    
    <category term="Mockito" scheme="http://sunknightzy.github.io/tags/Mockito/"/>
    
  </entry>
  
  <entry>
    <title>JVM-Java 对象模型</title>
    <link href="http://sunknightzy.github.io/2021/11/05/jvm/jvm-openjdk-oop-klass/"/>
    <id>http://sunknightzy.github.io/2021/11/05/jvm/jvm-openjdk-oop-klass/</id>
    <published>2021-11-05T03:23:39.000Z</published>
    <updated>2022-04-24T03:25:44.859Z</updated>
    
    
    <summary type="html">&lt;p&gt;Java对象保存在堆内存中。在内存中，一个Java对象包含三部分：对象头、实例数据和对齐填充。其中对象头是一个很关键的部分，因为对象头中包含锁状态标志、线程持有的锁等标志。&lt;/p&gt;</summary>
    
    
    
    <category term="jvm" scheme="http://sunknightzy.github.io/categories/jvm/"/>
    
    
    <category term="jvm" scheme="http://sunknightzy.github.io/tags/jvm/"/>
    
    <category term="oop-klass" scheme="http://sunknightzy.github.io/tags/oop-klass/"/>
    
  </entry>
  
  <entry>
    <title>finalize 方法重写对 GC 的影响分析</title>
    <link href="http://sunknightzy.github.io/2021/11/02/java/java-advance-gc-finalize/"/>
    <id>http://sunknightzy.github.io/2021/11/02/java/java-advance-gc-finalize/</id>
    <published>2021-11-02T03:17:56.000Z</published>
    <updated>2022-04-24T03:21:21.447Z</updated>
    
    
    <summary type="html">&lt;p&gt;关于 Object 的 finalize 方法，在日常开发中可能有超过 99% 的人都没有关注过，因为业务开发很少有重写 finalize 方法的场景；开发者对于 finalize 的认知大多在是“面试八股文”中，而且也不乏见到将 finalize、finally 以及 final 放在一块比较的 case，面试官可能是出于对初学者 java 基本语言知识的考量，但是这真的有意义吗？&lt;/p&gt;</summary>
    
    
    
    <category term="SOFA" scheme="http://sunknightzy.github.io/categories/SOFA/"/>
    
    
    <category term="SOFAArk" scheme="http://sunknightzy.github.io/tags/SOFAArk/"/>
    
    <category term="ClassLoader" scheme="http://sunknightzy.github.io/tags/ClassLoader/"/>
    
    <category term="gc" scheme="http://sunknightzy.github.io/tags/gc/"/>
    
  </entry>
  
  <entry>
    <title>log4j2 日志 PatternLayout 配置对 SOFAArk PluginClassLoader 的影响</title>
    <link href="http://sunknightzy.github.io/2021/11/01/sofa/sofa-ark-plugin-classloader-log4j/"/>
    <id>http://sunknightzy.github.io/2021/11/01/sofa/sofa-ark-plugin-classloader-log4j/</id>
    <published>2021-11-01T03:10:19.000Z</published>
    <updated>2022-04-24T03:25:15.660Z</updated>
    
    
    <summary type="html">&lt;p&gt;log4j2 相关类在 sofaark 插件中是导出的，因此当出现 log4j2 的类需要被加载时，会委托给 PluginClassLoader 进行加载。&lt;/p&gt;</summary>
    
    
    
    <category term="SOFA" scheme="http://sunknightzy.github.io/categories/SOFA/"/>
    
    
    <category term="SOFAArk" scheme="http://sunknightzy.github.io/tags/SOFAArk/"/>
    
    <category term="ClassLoader" scheme="http://sunknightzy.github.io/tags/ClassLoader/"/>
    
    <category term="类加载" scheme="http://sunknightzy.github.io/tags/%E7%B1%BB%E5%8A%A0%E8%BD%BD/"/>
    
    <category term="log" scheme="http://sunknightzy.github.io/tags/log/"/>
    
    <category term="gc" scheme="http://sunknightzy.github.io/tags/gc/"/>
    
  </entry>
  
  <entry>
    <title>记：SOFA Meepup 合肥站-SOFA 微服务体系技术生态于实践</title>
    <link href="http://sunknightzy.github.io/2021/07/25/share/shares-sofa-meetup-7/"/>
    <id>http://sunknightzy.github.io/2021/07/25/share/shares-sofa-meetup-7/</id>
    <published>2021-07-25T08:06:55.000Z</published>
    <updated>2022-04-23T07:07:47.288Z</updated>
    
    
    <summary type="html">&lt;p&gt;SOFA Meepup 合肥站从 5 月份开始筹划，至 7.24 在合肥成功举办，历时 2 个多月的时间，从到场人数来看，并没有受到大雨的影响，合肥开发者同学对于技术的热衷没有我们预想的那么佛系，尤其是在微服务领域。在线观看人数也大于预测，这对于所有参与组织活动的同学及给予大力支持的社区来说，都是极大的鼓励和反馈。&lt;/p&gt;
&lt;p&gt;点点滴滴，希望以文字的形式记录下来，记录这次活动之旅。&lt;/p&gt;</summary>
    
    
    
    <category term="experience" scheme="http://sunknightzy.github.io/categories/experience/"/>
    
    
    <category term="SOFA" scheme="http://sunknightzy.github.io/tags/SOFA/"/>
    
  </entry>
  
</feed>
